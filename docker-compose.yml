version: '3'
services:
  postgres:
    image: postgres:13-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=training
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - PGDATA=/database
    command: ["postgres", "-c", "log_statement=all"]
    volumes:
      - ./data/postgres:/database
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8000:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@training.pl
      - PGADMIN_DEFAULT_PASSWORD=admin
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      #KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  keycloak:
    image: jboss/keycloak
    environment:
      KEYCLOAK_USER: "admin"
      KEYCLOAK_PASSWORD: "admin"
      DB_VENDOR: "POSTGRES"
      DB_ADDR: "postgres"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_DATABASE: "training"
      KEYCLOAK_FRONTEND_URL: "http://keycloak:9100/auth"
    ports:
      - "9100:8080"
  jaeger-server:
    image: jaegertracing/all-in-one
    restart: always
    ports:
      - "16686:16686"
  alertmanager-server:
    image: prom/alertmanager
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./configuration-files/alertmanager.yml:/etc/prometheus/alertmanager.yml
  prometheus-server:
    image: prom/prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./configuration-files/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configuration-files/rules.yml:/etc/prometheus/rules.yml
  grafana-server:
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./configuration-files/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
  portainer:
    image: portainer/portainer-ce
    restart: always
    ports:
      - "9700:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
  configuration-server:
    image: configuration-server
    environment:
      GIT_URI: "https://github.com/landrzejewski/microservices"
    ports:
      - "8888:8888"
  discovery-server:
    image: discovery-server
    environment:
      CONFIGURATION_SERVER:  optional:configserver:http://configuration-server:8888
  gateway-server:
    image: gateway-server
    environment:
      CONFIGURATION_SERVER:  optional:configserver:http://configuration-server:8888
  products:
    image: products
    environment:
      CONFIGURATION_SERVER:  optional:configserver:http://configuration-server:8888
  shop:
    image: shop
    environment:
      CONFIGURATION_SERVER:  optional:configserver:http://configuration-server:8888